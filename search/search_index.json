{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Collection of personal notes about different  topics.</p> <p></p>"},{"location":"#reference","title":"Reference","text":"<ul> <li>donnemartin-system-design</li> </ul>"},{"location":"cloud/essentials/Encryption%20101/","title":"Encryption 101","text":""},{"location":"cloud/essentials/Encryption%20101/#encryption-at-rest","title":"Encryption at Rest","text":"<ul> <li>An example is a password on a laptop<ul> <li>If the laptop is stolen, the data is already encrypted and useless.</li> </ul> </li> <li>Commonly within cloud environments. Even if someone could find and access the base storage device, they can't do anything with it.</li> <li>Only one entity involved</li> </ul>"},{"location":"cloud/essentials/Encryption%20101/#encryption-in-transit","title":"Encryption in Transit","text":"<ul> <li>An encryption tunnel outside the raw data.</li> <li>Anyone looking from the outside will only see a stream of scrambled data.</li> <li>Used when there are multiple parties or systems at play.</li> </ul>"},{"location":"cloud/essentials/Encryption%20101/#terms","title":"Terms","text":"<ul> <li>plaintext: unencrypted data not limited to text</li> <li>key: a password</li> <li>ciphertext: encrypted data generated by an algorithm from plaintext and a key</li> </ul>"},{"location":"cloud/essentials/Encryption%20101/#symmetric-encryption","title":"Symmetric Encryption","text":"<p>The key is handed from one entity to another before the data. This is difficult because the key needs to be transferred securely. If the data is time sensitive, the key needs to be arranged beforehand.</p>"},{"location":"cloud/essentials/Encryption%20101/#asymmetric-encryption","title":"Asymmetric Encryption","text":"<ul> <li>public key: cannot decrypt data but can generate ciphertext</li> <li>private key: can decrypt data encrypted by the public key<ul> <li>the public key is uploaded to cloud storage. </li> <li>the data is encrypted and sent back to the original entity. </li> <li>the private key can decrypt the data.</li> </ul> </li> </ul> <p>This is secure because stolen public keys can only encrypt data. Private keys must be handled securely.</p>"},{"location":"cloud/essentials/Encryption%20101/#signing","title":"Signing","text":"<p>Encryption by itself does not prove who encrypted the data.</p> <ol> <li>An entity can sign a message with their private key</li> <li>Their public key is hosted in an accessible location.</li> <li>The receiving party can use the public key to confirm who sent the message.</li> </ol>"},{"location":"cloud/essentials/Encryption%20101/#steganography","title":"Steganography","text":"<p>concealing information within another message or physical object to avoid detection.</p> <p>Encryption is obvious when used. There is no denying that the data was encrypted. Someone could force you to decrypt the data packet.</p> <p>A file can be hidden in an image or other file. Is more difficult to find the message unless you know what to look for.</p> <p>One party would take another party's public key and encrypt some data to create ciphertext. That ciphertext can be hidden in another file so long as both parties know how the data will be hidden.</p>"},{"location":"cloud/essentials/Message%20delivery%20reliability/","title":"Message delivery reliability","text":""},{"location":"cloud/essentials/Message%20delivery%20reliability/#at-most-once-semantics","title":"At-most-once semantics \ud83d\udc80","text":"<ul> <li>easiest type of semantics to achieve.</li> <li>no delivery guarantees.</li> <li>each message is delivered zero or once (best case scenario) or not at all.</li> </ul> <p>The easiest type of semantics to achieve, from an engineering complexity perspective, since it can be done in a fire-and-forget way. There's rarely any need for the components of the system to be stateful. While it's the easiest to achieve, at-most-once is also the least desirable type of messaging semantics. It provides no absolute message delivery guarantees since each message is delivered once (best case scenario) or not at all.</p> <p></p>"},{"location":"cloud/essentials/Message%20delivery%20reliability/#at-least-once-semantics","title":"At-least-once semantics \ud83d\udc6f","text":"<ul> <li>improvement on at-most-once semantics.</li> <li>messages may be duplicated but they can't be lost.</li> <li>good in scenarios where deduplication is possible on the consumer side</li> </ul> <p>This is an improvement on at-most-once semantics. There might be multiple attempts at delivering a message, so at least one attempt is successful. In other words, there's a chance messages may be duplicated, but they can't be lost. While not ideal as a system-wide characteristic, at-least-once semantics are good enough for use cases where duplication of data is of little concern or scenarios where deduplication is possible on the consumer side.</p> <p></p>"},{"location":"cloud/essentials/Message%20delivery%20reliability/#exactly-once-semantics","title":"Exactly-once semantics \ud83d\udd12:","text":"<ul> <li>more secure in terms of data integrity.</li> <li>message can neither be lost nor delivered twice.</li> <li>It\u2019s also the hardest to achieve.</li> </ul> <p>The ultimate message delivery guarantee and the optimal choice in terms of data integrity. As its name suggests, exactly-once semantics means that each message is delivered precisely once. The message can neither be lost nor delivered twice (or more times). Exactly-once is by far the most dependable message delivery guarantee. It\u2019s also the hardest to achieve.</p> <p></p>"},{"location":"cloud/essentials/Network%20refresher/","title":"Network refresher","text":"<p>IPv4 - RFC 791 (1981)</p> <p>Dotted decimal notation for human readability.</p> <ul> <li>4 numbers from 0 to 255 separated by a period.</li> <li>Octet are the numbers between the period.</li> <li>Manually assigned or by a DHCP server</li> <li>the Network Prefixes or network mask or also know as subnet mask purpose is to allow devices to identify and route data packets between different networks using IP addresses.<ul> <li>additionally you can identify how many networks can a subnet mask have by taking into account the following:</li> <li>*IPv4 we can only use *32bits prefixes, ipv6 can go up to 128 bits.</li> <li>0 (lowest) means 0 for the network and 0 for the host</li> <li>16 for the network, 16 for the host so the network can have (65.536) IP addresses</li> <li>24 the first 24 bits are for the network and 8 for the host. so the host network can have (256 IP addresses - 2 = 254)</li> <li>32 (highest) for the network and 0 for the host , so the network can have 1 IP addresses</li> <li>Formula : e.g. in a subnet /24 we could have 2^8 (8 bits for the host) - 2 = 254</li> </ul> </li> </ul> <p>There are just over 4 billion addresses. This was not very flexible because it was either too small or large for some corporations. Some IP addresses was always left unused.</p>"},{"location":"cloud/essentials/Network%20refresher/#classful-addressing","title":"Classful Addressing","text":"<ul> <li>Class A range<ul> <li>Starts at\u00a0<code>0.0.0.0</code>\u00a0and ends at\u00a0<code>127.255.255.255</code>.</li> <li>Split into 128 class A networks</li> <li>Handed out to large companies</li> </ul> </li> <li>Class B Range<ul> <li>Half the range of class A.</li> <li>Starts at\u00a0<code>128.0.0.0</code>\u00a0and ends at\u00a0<code>191.255.255.255</code>.</li> </ul> </li> <li>Class C Range<ul> <li>Half of range class B</li> <li>Starts at\u00a0<code>192.0.0.0</code>\u00a0and ends at\u00a0<code>223.255.255.255</code>.</li> </ul> </li> </ul>"},{"location":"cloud/essentials/Network%20refresher/#internet-private-ips-rfc1918","title":"Internet / Private IPs - RFC1918","text":"<p>These can't communicate over the internet and are used internally only</p> <ul> <li>One class A network:\u00a0<code>10.0.0.0</code>\u00a0-\u00a0<code>10.255.255.255</code></li> <li>16 Class B networks:\u00a0<code>172.16.0.0</code>\u00a0-\u00a0<code>172.31.255.255</code></li> <li>256 Class C networks:\u00a0<code>192.168.0.0</code>\u00a0-\u00a0<code>192.168.255.255</code></li> </ul>"},{"location":"cloud/essentials/Network%20refresher/#classless-inter-domain-routing-cidr","title":"Classless inter-domain routing (CIDR)","text":"<p>CIDR networks are represented by the starting IP address of the network called the network address and the prefix.</p> <p>CIDR Example:\u00a0<code>10.0.0.0/16</code></p> <ul> <li><code>10.0.0.0</code>\u00a0is the first address on the network</li> <li>/16 is the size of the network called the prefix.<ul> <li>The bigger the prefix, the smaller the network</li> <li>The smaller the prefix, the bigger the network.</li> </ul> </li> <li>/16 provides 65,536 addresses.</li> <li><code>10.0.0.0/17</code>\u00a0and\u00a0<code>10.0.128.0/17</code>\u00a0are each half of the original example.<ul> <li>This is called\u00a0subnetting</li> </ul> </li> </ul>"},{"location":"cloud/essentials/Network%20refresher/#ip-address-notations-to-remember","title":"IP address notations to remember","text":"<ul> <li><code>0.0.0.0/0</code>\u00a0means all IP addresses</li> <li><code>10.0.0.0/8</code>\u00a0means 10.ANYTHING - Class A</li> <li><code>10.0.0.0/16</code>\u00a0means 10.0.ANYTHING - Class B</li> <li><code>10.0.0.0/24</code>\u00a0means 10.0.0.ANYTHING - Class C</li> <li><code>10.0.0.0/32</code>\u00a0means only 1 IP address</li> </ul> <p><code>10.0.0.0/16</code>\u00a0is the equivalent of\u00a0<code>1234</code>\u00a0as a password. You should consider other ranges that people might use to ensure it does not overlap.</p>"},{"location":"cloud/essentials/Network%20refresher/#packets","title":"Packets","text":"<p>Contains:</p> <ul> <li>source IP address</li> <li>destination IP address</li> <li>data the source IP wants to communicate with the destination IP.</li> </ul> <p>TCP and UDP are protocols built on top of IP.</p> <ul> <li>TCPIP means TCP running with IP</li> <li>UDPIP means UDP running with IP</li> </ul> <p>TCP/UDP Segment has a source and destination port number. This allows devices to have multiple conversations at the same time. In AWS when data goes through network devices, filters can be set based on IP addresses and port numbers.</p>"},{"location":"cloud/essentials/Network%20refresher/#ipv6-rfc-8200-2017","title":"IPv6 - RFC 8200 (2017)","text":"<p><code>2001:0db8:28ac:0000:0000:82ae:3910:7334</code></p> <p>The value is hex and there are two octets per spacing or one hextet. The redundant zeros can be removed to create:</p> <p><code>2001:0db8:28ac:0:0:82ae:3910:7334</code></p> <p>or you can remove them all entirely once per address</p> <p><code>2001:0db8:28ac::82ae:3910:7334</code></p> <p>Each address is 128 bits long. They are addressed by the start of the network and the prefix. Since each grouping is 16 values, we can multiple the groups by this to achieve the prefix.</p> <p><code>2001:0db8:28ac::/48</code>\u00a0really means the network starts at\u00a0<code>2001:0db8:28ac:0000:0000:0000:0000:0000</code>\u00a0and finishes at\u00a0<code>2001:0db8:28ac:ffff:ffff:ffff:ffff:ffff</code></p> <p><code>::/0</code>\u00a0represents all IPv6 addresses</p>"},{"location":"cloud/essentials/Network%20refresher/#message-addressing-methods","title":"Message Addressing Methods","text":"<ul> <li>Unicast is for one-to-one communication, where a message is sent to a specific recipient.</li> <li>Multicast is for one-to-many communication, where a message is sent to a selected group of recipients who have expressed interest in receiving it.</li> <li>Broadcast is for one-to-all communication, where a message is sent to all devices on a network, regardless of their interest.</li> <li>Anycast is for one-to-nearest communication, where a message is sent to the closest available receiver among a group of potential receivers.</li> </ul>"},{"location":"cloud/essentials/Network%20refresher/#distribution-models","title":"Distribution Models","text":"<ul> <li>Point-to-point:<ul> <li>point to point networks are used to connect two locations together via private, dedicated line.</li> </ul> </li> <li>Hub and Spoke: <ul> <li>not direct communication among different points</li> <li>instead everything has to go to a central hub and is then forwarded to the other\u00a0spoke.</li> <li>Cons:<ul> <li>but it has a single point of failure (SPF), if the hub fails, everything fails</li> <li>in hub congestion, which can create bottlenecks.</li> </ul> </li> </ul> </li> </ul>"},{"location":"cloud/essentials/RPO%20%26%20RTO/","title":"RPO & RTO","text":""},{"location":"cloud/essentials/RPO%20%26%20RTO/#tldr","title":"TL;DR","text":"<ul> <li>Recovery Point Objective (RPO) \u21d2 <ul> <li>max acceptable data loss.</li> <li>max amount of data (time) that can be lost.</li> </ul> </li> <li>Recovery Time Objective (RTO) \u21d2<ul> <li>(max acceptable time can recover operational state) </li> <li>max tolerable duration of a service outage.</li> </ul> </li> <li>Aim for Goldilocks** . <ul> <li>As close to the TRUE business requirements as possible.</li> </ul> </li> </ul>"},{"location":"cloud/essentials/RPO%20%26%20RTO/#recovery-point-objective-rpo","title":"Recovery Point Objective (RPO)","text":"<ul> <li>max amount of data (time) that can be lost.</li> <li>Lower RPO = More **Frequent Backups = Expensive Budget $$$ \ud83d\udcb0</li> <li>Higher RPO = Less Frequent Backups **= Lower Budget $$$ \ud83d\udcb0</li> <li>each back up = Recovery Point (RP) \u21d2 can either be full recovery back up or incremental backup.</li> <li>Best Practice it is recommended that a backup frequency is \u2265 desired (RPO)<ul> <li>e.g. RPO = 6 hours , backup frequency should be every 6 hours or 3 hours to avoid data loss</li> <li>tradeoff \u21d2 with more frequently back ups every x hour / minute:<ul> <li>we minimize the loss of data but we increase the cost $$$</li> </ul> </li> </ul> </li> </ul>"},{"location":"cloud/essentials/RPO%20%26%20RTO/#recovery-time-objective-rto","title":"Recovery Time Objective (RTO)","text":"<ul> <li>Max tolerable length of time a system can be down after a failure or disaster occurs.</li> <li>Max tolerable time it takes for a system to recover and resume operations.</li> <li>Maximum time from when a failure occurs through to when the business will need that system back up and running in an operational state.</li> </ul>"},{"location":"cloud/essentials/RPO%20%26%20RTO/#can-be-reduced-via","title":"Can be reduced via","text":"<ul> <li>careful planning.</li> <li>monitoring.</li> <li>notification process.</li> <li>spare hardware.</li> <li>trainings.</li> <li>more efficient systems (Virtual Machines or AWS).</li> </ul>"},{"location":"cloud/essentials/Resilience/","title":"Resilience","text":""},{"location":"cloud/essentials/Resilience/#high-availability-ha","title":"High Availability (HA) \ud83c\udff7\ufe0f","text":"<p>TL;DR</p> <ul> <li>Goal: Maximizing a system's uptime \ud83d\udcc8.</li> <li>User disruption is acceptable \u2705.</li> <li>More budget friendly \ud83c\udff7\ufe0f</li> <li>With Spare infrastructure ready to switch to you can minimize outages \ud83d\udc4c.</li> <li>cope through disaster.</li> <li>e.g. 4x4 repairing a tire hole with a spare tire<ul> <li>spare tire.</li> <li>some user disruption while doing so.</li> </ul> </li> </ul>"},{"location":"cloud/essentials/Resilience/#fault-tolerance-ft","title":"Fault-Tolerance (FT) \ud83d\udcb0","text":"<ul> <li>Goal: <ul> <li>Work through failure of some its components \ud83e\ude79  </li> <li>****minimize outages**** \u26a1.</li> </ul> </li> <li>User disruption not allowed or acceptable \ud83d\udeab.</li> <li>More expensive \ud83d\udcb8.</li> <li>Outages must be minimized and the system needs levels of redundancy.</li> <li>Mission or life critical situations \ud83d\udd2b</li> <li>operate through disaster.</li> <li>e.g. Resilient systems on large planes<ul> <li>(like extra engines than it needs to so it can operate through  failure).</li> </ul> </li> </ul>"},{"location":"cloud/essentials/Resilience/#disaster-recovery-dr","title":"Disaster Recovery (DR) \u2620\ufe0f","text":"<ul> <li> <p>Goal: DR is a process designed to keep the non replaceable parts safe.</p> </li> <li> <p>what to plan for ? and do when disaster occurs ?</p> </li> <li>*e.g.* DR Process =&gt; are pilot or passenger ejection systems.</li> <li>more expensive \ud83d\udcb0.</li> <li>Set of policies, tools and procedures to\u00a0enable the recovery\u00a0or\u00a0continuation\u00a0of\u00a0vital\u00a0technology infrastructure and systems\u00a0following a natural \ud83c\udf43 or human-induced disaster \ud83e\udd21.</li> <li>DR can largely be automated to eliminate the time for recovery and errors.</li> </ul> <p>This involves:</p> <ul> <li>Pre-planning<ul> <li>Ensure plans are in place for extra hardware</li> <li>[DO NOT STORE] backups at the same site as the system.</li> </ul> </li> <li>DR Processes<ul> <li>Cloud machines ready when needed.</li> <li>Run periodic DR Testing.</li> <li>all the process and tools should be properly documented.<ul> <li>all the parties involved should run periodic DR Testing from time to time to minimize human error.</li> <li>all logins to key systems need to be available for staff at time of disaster.</li> </ul> </li> </ul> </li> <li>This is designed to keep the crucial and non replaceable parts of the system in place.</li> <li>Used when HA and FT don't work.</li> </ul>"},{"location":"dotnet/ASP.NET%20Core/","title":"ASP.NET Core","text":""},{"location":"dotnet/ASP.NET%20Core/#middleware-ordering","title":"Middleware Ordering","text":"<ul> <li>When a request is received by .NET Core web API, it goes through a chain of middleware's. </li> <li>Every middleware add some feature in the request pipeline on top of previous middleware. </li> <li>In addition to middleware there are also filters which are executed during request processing.</li> </ul>"},{"location":"dotnet/ASP.NET%20Core/#middleware-order","title":"Middleware order","text":"<ol> <li>Exception Handler</li> <li>HSTS - enforce Strict transport security.</li> <li>HTTPs Redirection</li> <li>Static Files (MVC)</li> <li>Routing</li> <li>CORS</li> <li>Authentication</li> <li>Authorization</li> <li>Custom Middleware's</li> <li>Endpoint Middleware</li> </ol>"},{"location":"dotnet/ASP.NET%20Core/#endpoint-middleware","title":"Endpoint Middleware","text":""},{"location":"dotnet/ASP.NET%20Core/#reference","title":"Reference","text":"<ul> <li>ASP.NET Middleware overview</li> </ul>"},{"location":"dotnet/ASP.NET/","title":"ASP.NET","text":""},{"location":"dotnet/ASP.NET/#middleware-request-processing-order","title":"Middleware / Request processing order","text":"<ol> <li>Routing middleware <ul> <li>set up routes</li> </ul> </li> <li>Controller middleware<ul> <li>set up http handlers and controller factories.</li> </ul> </li> <li>Action Middleware<ul> <li>set up action invoker</li> <li>set up model binders<ul> <li>data type conversion</li> <li>data validation</li> </ul> </li> <li>set up authentication Filter<ul> <li>validate identity.</li> </ul> </li> <li>set up Authorization Filter<ul> <li>validate permissions or role.</li> </ul> </li> <li>execute action filters<ul> <li>before action is executed - OnActionExecuting</li> <li>after action is executed - OnActionExecuted</li> </ul> </li> </ul> </li> <li>execute action results<ul> <li>Action Result can be:<ul> <li>ViewResult<ul> <li>ViewResult</li> <li>PartialViewResult</li> </ul> </li> <li>NonViewResult<ul> <li>RedirectToRouteResult</li> <li>RedirectResult</li> <li>ContectResult</li> <li>JsonResult</li> <li>FileResult</li> <li>EmptyResult</li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"dotnet/ASP.NET/#reference","title":"Reference","text":"<ul> <li>dotnettricks</li> </ul>"},{"location":"dotnet/CPU/","title":"CPU","text":"<ul> <li>always profile your code before optimizing it is required in order to have a baseline performance.</li> <li>Sampling profiling<ul> <li>useful when you need to see the sampling of methods in the callstack and how much time is spent on each of them</li> <li>Non CPU work is not visible! (e.g. Thread.spleep() , I/O Operation)</li> <li>Inclusive Samples : samples that contain the method.</li> <li>Exclusive samples: samples with the given function on the top of the stack.</li> </ul> </li> <li>Instrumentation.<ul> <li>injects code to measure every method and also shows non cpu related work.</li> <li>more detailed</li> <li>more overhead</li> <li>Measures also non CPU Work</li> </ul> </li> </ul>"},{"location":"dotnet/Glossary/","title":"Glossary","text":""},{"location":"dotnet/Glossary/#gc-root","title":"GC root","text":"<ul> <li>Every object tree must have one or more root objects.</li> <li>As long as the application can reach those roots, the whole tree is reachable.</li> <li>But when are those root objects considered reachable? Special objects called garbage-collection roots (GC roots; see Figure below) are always reachable and so is any object that has a garbage-collection root at its own root.</li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/","title":"GC Settings","text":"<p>In .NET, garbage collection (GC) is the process of automatically managing the memory used by a program by reclaiming memory occupied by objects that are no longer in use. There are 2 GC modes:</p>"},{"location":"dotnet/Memory/GC%20Settings/#tldr","title":"TL;DR","text":"<ul> <li>multi-core ? single app in server ? Server GC<ul> <li>multi-core ? hundreds of instances in server ? use Workstation GC</li> </ul> </li> <li>single-core ? multiple app in server ? Workstation GC<ul> <li>single core ? single app in server ? Workstation GC</li> </ul> </li> <li>multiple instances ? low amount logical CPUs ? non-concurrent mode</li> <li>few instances ? high amount of logical CPUs ? concurrent mode.</li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#trade-offs","title":"Trade-offs","text":"<ul> <li>Latency vs. Throughput:<ul> <li>Workstation GC and Server GC is the balance between low-latency and high-throughput.</li> <li>Workstation GC prioritizes low-latency and is suitable for applications where responsiveness is crucial.</li> <li>Server GC prioritizes high-throughput and is more suitable for server applications processing a large number of requests concurrently.</li> </ul> </li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#workstation-gc","title":"Workstation GC","text":"<ul> <li>designed for client apps.</li> <li>default GC flavor for standalone apps.</li> <li>For hosted apps, for example, those hosted by ASP.NET, the host determines the default GC flavor.</li> <li>asynchronous per core.</li> <li>Use GC generations, distinguishing between short-lived and long-lived objects.</li> <li>use single dedicated thread for GC.</li> <li>optimized for low-latency and responsiveness,.</li> <li>making it suitable for interactive applications where minimizing pause times is critical.</li> <li>prioritizes low-latency and is suitable for applications where responsiveness is crucial</li> <li>You have a UI or share the machine with other important process.<ul> <li>These are typically applications with a graphical user interface (GUI), such as desktop applications.</li> </ul> </li> <li>can be concurrent or non-concurrent.</li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#gc-concurrency-models","title":"GC Concurrency Models","text":""},{"location":"dotnet/Memory/GC%20Settings/#concurrent-background-throughput","title":"Concurrent / Background (Throughput)","text":"<ul> <li>aim to minimize the impact on the application's responsiveness by performing garbage collection concurrently with the application threads.</li> <li>intended for server applications that need high throughput and scalability.</li> <li>recommended one for docker apps.</li> <li>potentially longer overall collection time.</li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#non-concurrent-pause-time","title":"Non-concurrent (Pause time)","text":"<ul> <li>Stop-the-World (STW)<ul> <li>The non-concurrent GC performs GC by stopping the execution of all application threads.</li> </ul> </li> <li>also known as a \"stop-the-world\" event. During this time, the garbage collector scans the managed heap for unreachable objects and reclaims their memory.</li> <li>whenever the GC has something to do, it will stop all your code , does its job and as the last step it resumes all your threads.</li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#general-considerations","title":"General Considerations","text":"<ul> <li>If you're using the environment variables, .NET 6 and later versions standardize on the prefix\u00a0<code>DOTNET_</code>\u00a0instead of\u00a0<code>COMPlus_</code>. However, the\u00a0<code>COMPlus_</code>\u00a0prefix will continue to work. If you're using a previous version of the .NET runtime, you should still use the\u00a0<code>COMPlus_</code>\u00a0prefix, for example,\u00a0<code>COMPlus_gcServer</code>.</li> <li>Because GC is per process, it rarely ever makes sense to set these configurations at the machine level. For example, you wouldn't want every .NET process on a machine to use server GC or the same heap hard limit.</li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#performance-considerations","title":"*Performance considerations*","text":""},{"location":"dotnet/Memory/GC%20Settings/#workstation-gc_1","title":"*Workstation GC*","text":"<ul> <li>The collection occurs on the user thread that triggered the garbage collection and remains at the same priority.</li> <li>Because user threads typically run at normal priority, the garbage collector (which runs on a normal priority thread) must compete with other threads for CPU time.<ul> <li>(Threads that run native code are not suspended on either server or workstation garbage collection.)</li> </ul> </li> <li>Workstation garbage collection is always used on a computer that has only one logical CPU, regardless of the\u00a0config.</li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#server-gc","title":"*Server GC*","text":"<p>TL;DR</p> <p>If you're running hundreds of instances of an application, consider using workstation GC with concurrent GC disabled.</p> <p>This will result in less context switching, which can improve performance.</p> <ul> <li>The collection occurs on multiple dedicated threads.<ul> <li>On Windows, these threads run at\u00a0<code>THREAD_PRIORITY_HIGHEST</code>\u00a0priority level.</li> </ul> </li> <li>A heap and a dedicated thread to perform garbage collection are provided for each logical CPU, and the heaps are collected at the same time.<ul> <li>Each heap contains a small object heap and a large object heap, and all heaps can be accessed by user code. Objects on different heaps can refer to each other.</li> </ul> </li> <li>Because multiple garbage collection threads work together, server garbage collection is faster than workstation garbage collection on the same size heap.</li> <li>Server garbage collection often has larger size segments. However, this is only a generalization: segment size is implementation-specific and is subject to change. Don't make assumptions about the size of segments allocated by the garbage collector when tuning your app.</li> <li>Server GC can be resource-intensive.<ul> <li>For example, imagine that there are 12 processes that use server GC running on a computer that has four logical CPUs.</li> <li>If all the processes happen to collect garbage at the same time, they would interfere with each other, as there would be 12 threads scheduled on the same logical CPU.</li> <li>If the processes are active, it's not a good idea to have them all use server GC.</li> </ul> </li> </ul>"},{"location":"dotnet/Memory/GC%20Settings/#interesting-links","title":"Interesting Links","text":"<ul> <li>Workstation vs. server garbage collection (GC) - .NET</li> <li>Garbage collector config settings - .NET</li> <li>Fundamentals of garbage collection - .NET</li> </ul>"},{"location":"dotnet/Memory/Performance%20tips/","title":"Performance tips","text":"<ul> <li>don\u2019t allocate too much on the managed heap.<ul> <li>less allocations , means less works for the GC, which translate to less work for the CPU.</li> </ul> </li> <li>don\u2019t have GC roots to objects that we don\u2019t need.</li> <li>Pattern matching:<ul> <li>generally is faster, but it should be bench to test to see this </li> </ul> </li> </ul> <ul> <li>ValueTask discriminated union \u2192 Either a Task or the result of a task<ul> <li>it doesn\u2019t allocate on the Managed Heap</li> <li>caveats:<ul> <li>only use it, if you know the result of the asynchronous operation is immediately available or when you already have a cached result.</li> <li>Only if performance analysis proves it worthwhile should a\u00a0<code>ValueTask&lt;TResult&gt;</code>\u00a0be used instead of\u00a0<code>Task&lt;TResult&gt;</code>.</li> </ul> </li> </ul> </li> </ul> <ul> <li>C# Tuples feature is a value type, the old Tuple is a reference Type<ul> <li>with the new tuple you avoid allocations.</li> </ul> <li>Use local functions<ul> <li>Delegates (Func) allocate a new object in the Managed Heap</li> </ul> </li> <ul> <li>return ref for value types<ul> <li>this is useful when you have a big value type <ul> <li>e.g array of ints, and want to avoid copying all the items whenever you return from the method.</li> </ul> </li> <li>the ref keyword was introduced to avoid the \u201cunsafe\u201d keyword.</li> </ul> </li> </ul>"},{"location":"dotnet/Memory/Stack%20vs%20Managed%20Heap/","title":"Stack vs Managed Heap","text":"<ul> <li>objects can be stored on the Managed Heap or stack:<ul> <li>Managed heap: reference types</li> <li>stack: value types</li> </ul> </li> </ul>"},{"location":"dotnet/Memory/Stack%20vs%20Managed%20Heap/#troubleshoot-tips","title":"Troubleshoot tips","text":"<ul> <li>First identify the type that allocate more and then identify in which method.</li> <li>GC runs every once in a while and checks for dead objects (objects with no GC root reference)</li> <li>Utilization Heap size, physical memory size</li> <li>Number of objects</li> <li>Typical problems:<ul> <li>too much work by the GC (hurts CPU)</li> <li>not enough work by the CG (eventually out of memory)</li> </ul> </li> </ul>"},{"location":"dotnet/Memory/Stack%20vs%20Managed%20Heap/#stack","title":"Stack","text":"<ul> <li>store on the stack , which means <ul> <li>less allocations.</li> <li>less pressure on the GC.</li> </ul> </li> <li>good for small types.</li> <li>even better if you use them as local variables</li> <li>not always stored on stack <ul> <li>(edge case, if Object root is stored in the heap , then it will also be stored on the heap).</li> </ul> </li> <li>implement *IEquatable and override Equals*:<ul> <li>default implementation has unboxing and decreases performance.</li> </ul> </li> <li>in case of big value types: value semantic \u21d2 it will be copied</li> </ul>"},{"location":"dotnet/Memory/Stack%20vs%20Managed%20Heap/#managed-heap","title":"Managed Heap","text":"<ul> <li>Small object Heap (SOH) : objects &lt; 85 k bytes:<ul> <li>Gen0 \ud83d\udc76 ****:<ul> <li>very frequently - fast collection</li> <li>new objects are placed here, most will be collected on first sweep.</li> </ul> </li> <li>Gen1 \ud83d\udc68\u200d\ud83c\udf93 ****:<ul> <li>less frequently</li> <li>Include gen0 sweep.</li> <li>Survivors of the first sweep are placed here, buffer between Gen0 and Gen2.</li> </ul> </li> <li>Gen2 \ud83d\udc74 ****:<ul> <li>collected rarely - slower of all three</li> <li>Gen2 sweep include Gen0 and Gen1 sweep - also called FULL GC</li> <li>Survivors of the second sweep are placed here, <ul> <li>Long living objects </li> <li>e.g static fields.</li> </ul> </li> </ul> </li> </ul> </li> <li>Large object Heap (LOH) : objects &gt; 85 k bytes<ul> <li>it doesn\u2019t have gens , but is collected with gen2 sweeps.</li> </ul> </li> </ul>"},{"location":"dotnet/Memory%20APIs/ArrayPool/","title":"ArrayPool","text":"<ul> <li>This class help reduce extra allocations for big arrays</li> <li><code>ArrayPool&lt;T&gt;</code> New API from C# 7 to \u201crent\u201d temp arrays.</li> </ul> <p>Test </p>"},{"location":"dotnet/Memory%20APIs/ArrayPool/#methods","title":"Methods","text":"<ul> <li>Rent an array of size.</li> </ul> <pre><code>public void TestRent()\n{\n  var arr = ArrayPool&lt;int&gt;.Shared.Rent(256 * 1024);\n  Console.WriteLine(arr[0].ToString());\n  //use arr.\n  ArrayPool&lt;int&gt;.Shared.Return(arr);\n}\n</code></pre> <ul> <li>Create<ul> <li>creates a custom array pool bigger than max default 2^20.</li> <li>only use custom pools, when strictly needed , each custom pool is stored in Large Object Heap (LOH) so it means a FULL GC sweep and more CPU work.</li> </ul> </li> </ul>"},{"location":"dotnet/Memory%20APIs/Span/","title":"Span","text":"<p>An abstraction over all types of memory that we can allocate in .NET..</p> <p></p>"},{"location":"dotnet/Memory%20APIs/Span/#tldr","title":"TL;DR","text":"<ul> <li>not recommended for async workflows, for that use `Memory <li>general use case =&gt; Parsing and formatting.<ul> <li>can parse big numbers in string format to string with `ReadOnlySpan <p>Traditional methods for allocated block of memory are:</p>"},{"location":"dotnet/Memory%20APIs/Span/#managed-memory","title":"Managed memory","text":"<pre><code>byte[] myArray = new byte[100]\n</code></pre>"},{"location":"dotnet/Memory%20APIs/Span/#unmanaged-memory","title":"Unmanaged memory","text":"<ul> <li>this allocation is invisible to the GC, since is unmanaged, you are responsible for releasing the memory.</li> <li>to allocate memory: <pre><code>IntPtr ptr = Marshal.AllocHGlobal(100)\n</code></pre></li> <li>to free memory: <pre><code>Marshal.FreeHGlobal(ptr)\n</code></pre></li> </ul>"},{"location":"dotnet/Memory%20APIs/Span/#allocation-of-memory-on-the-stack","title":"Allocation of memory on the stack","text":"<p>very efficient since both allocation and deallocation are on the stack.</p> <p><pre><code>byte* myArray = stackallock byte[100]\n</code></pre> -  Caveats     - can only do it in unsafeguarded.     - stack is small, allocate too much and can get stack overflow exception.     - max size for 32 bits =&gt; 1 MB     - max size for 64 bits =&gt; 4 MB</p>"},{"location":"dotnet/Message%20bus/CAP/","title":"CAP","text":"<p>https://github.com/dotnetcore/CAP</p>"},{"location":"dotnet/Testing/Behavior/","title":"Behavior","text":"<ul> <li>SpecFlow</li> <li>BDDfy</li> <li>LightBDD</li> </ul>"},{"location":"dotnet/Testing/E2E/","title":"E2E","text":"<ul> <li>Playwright</li> <li>Selenium port by microsoft.</li> <li>Headless Chrome - Puppeteer Sharp</li> </ul>"},{"location":"dotnet/Testing/Integration/","title":"Integration","text":"<ul> <li>WebApplicationFactory</li> <li>recommended up to .NET 5 and .NET6 TestServer</li> <li>Respawn</li> <li>Test Containers</li> </ul>"},{"location":"dotnet/Testing/Performance/","title":"Performance","text":"<ul> <li>k6</li> <li>JMeter</li> <li>Crank</li> <li>Bombardier</li> </ul>"},{"location":"dotnet/Testing/Snapshot/","title":"Snapshot","text":"<ul> <li>Verify</li> </ul>"},{"location":"dotnet/Testing/Unit/","title":"Unit","text":""},{"location":"dotnet/Testing/Unit/#mocking","title":"Mocking","text":"<ul> <li>Moq</li> <li>NSubstitute</li> <li>FakeItEasy</li> </ul>"},{"location":"dotnet/Testing/Unit/#assertion","title":"Assertion","text":"<ul> <li>FluentAssertions</li> <li>Shouldly</li> </ul>"},{"location":"dotnet/Testing/Unit/#fake-data-generators","title":"Fake data generators","text":"<ul> <li>Bogus</li> <li>AutoFixture</li> <li>GenFu</li> </ul>"},{"location":"front%20end/general/Javascript/","title":"Javascript","text":"<ul> <li>Types</li> <li>DOM</li> <li>Scope</li> <li>Event Loop</li> <li>Hoisting</li> <li>IIFE</li> <li>Closure</li> <li>Prototype<ul> <li>Prototype Chain</li> </ul> </li> <li>Promise</li> <li>Callback</li> <li>Currying</li> <li>Proxy</li> <li>Type Coercion</li> <li>HOF</li> <li>Async/await</li> <li>Difference between function expression, function declaration, and arrow functions.</li> </ul>"},{"location":"front%20end/general/resources/","title":"Resources","text":""},{"location":"front%20end/general/resources/#books","title":"Books","text":"<ul> <li>You don't know JS</li> </ul>"},{"location":"front%20end/general/typescript/","title":"Typescript","text":"<ul> <li>Basic Types</li> <li>Type Inference</li> <li>Interface</li> <li>Union</li> <li>Enum</li> <li>Generics</li> <li>Decorators</li> <li>Type Assertion</li> </ul>"},{"location":"oop/oop%20principles/","title":"Oop principles","text":"<p>TODO</p>"},{"location":"oop/oop%20principles/#paradigm","title":"Paradigm","text":""},{"location":"oop/oop%20principles/#principles","title":"Principles","text":"<ul> <li>Abstraction</li> <li>Inheritance</li> <li>Polymorphism</li> <li>Encapsulation</li> </ul>"},{"location":"oop/oop%20principles/#abstraction","title":"Abstraction","text":"<ul> <li>Data Abstraction</li> <li>Procedural (Process, Control) Abstraction</li> <li>Procedural Abstraction by Parameterization</li> <li>Procedural Abstraction by Specification</li> </ul>"},{"location":"oop/oop%20principles/#inheritance","title":"Inheritance","text":"<ul> <li>Encapsulation and Information Hiding</li> <li>Method Hiding and Overriding</li> </ul>"},{"location":"oop/oop%20principles/#polymorphism","title":"Polymorphism","text":"<ul> <li>Ad hoc Polymorphism</li> <li>Overloading Polymorphism</li> <li>Coercion Polymorphism</li> <li>Universal Polymorphism</li> <li>Inclusion Polymorphism</li> <li>Parametric polymorphism</li> <li>Invariant Parametric polymorphism</li> <li>Covariant Parametric polymorphism</li> <li>Contravariant Parametric polymorphism</li> </ul>"},{"location":"oop/oop%20principles/#dispatch","title":"Dispatch","text":"<ul> <li>Static Dispatch</li> <li>Dynamic Dispatch</li> <li>Single dynamic dispatch</li> <li>Multiple dynamic dispatch</li> </ul>"},{"location":"oop/oop%20principles/#reference","title":"Reference","text":"<ul> <li># 4 Principles of Object-Oriented Programming</li> </ul>"},{"location":"oop/design%20interview%20questions/design%20a%20bank/","title":"Design a bank","text":"<p>TODO</p>"},{"location":"oop/guidelines/Code%20smell/","title":"Code smell","text":"<p>is a sign of potentially problematic code structure or design, suggesting a need for refactoring. These issues can lead to reduced maintainability, readability, and flexibility in the software.</p>"},{"location":"oop/guidelines/Code%20smell/#bloaters","title":"Bloaters","text":"<ul> <li>Long Method</li> <li>Large Class</li> <li>Primitive Obsession</li> <li>Long Parameter List</li> <li>Data Clumps</li> </ul>"},{"location":"oop/guidelines/Code%20smell/#object-orientation-abusers","title":"Object-Orientation Abusers","text":"<ul> <li>Switch Statements</li> <li>Temporary Field</li> <li>Refused Bequest</li> <li>Alternative Classes with Different Interfaces</li> </ul>"},{"location":"oop/guidelines/Code%20smell/#change-preventers","title":"Change Preventers","text":"<ul> <li>Divergent Change</li> <li>Shotgun Surgery</li> <li>Parallel Inheritance Hierarchies</li> </ul>"},{"location":"oop/guidelines/Code%20smell/#dispensable","title":"Dispensable","text":"<ul> <li>Comments.</li> <li>Duplicate Code.</li> <li>Lazy Class.</li> <li>Data Class.</li> <li>Dead Code.</li> <li>Speculative Generality.</li> </ul>"},{"location":"oop/guidelines/Code%20smell/#couplers","title":"Couplers","text":"<ul> <li>Feature Envy.</li> <li>Inappropriate Intimacy.</li> <li>Message Chains.</li> <li>Middle Man.</li> </ul>"},{"location":"oop/guidelines/SOLID/","title":"SOLID","text":"<p>set of design principles defined by Robert C. Martin.</p>"},{"location":"oop/guidelines/SOLID/#single-responsibility","title":"Single responsibility","text":"<p>a class should have one and one reason to change. meaning that a class should have only one job.</p>"},{"location":"oop/guidelines/SOLID/#open-closed","title":"Open closed","text":"<p>objects or entities should be open for extension, but closed for modification.</p>"},{"location":"oop/guidelines/SOLID/#liskov-substitution","title":"Liskov substitution","text":"<p>if a class A is a subtype of class B, it should be interchangeable with A without disrupting the behavior's of our program.</p>"},{"location":"oop/guidelines/SOLID/#interface-segregation","title":"Interface segregation","text":"<p>a client should never be forced to implement an interface that it doesn't use or methods they do not use.</p>"},{"location":"oop/guidelines/SOLID/#dependency-inversion","title":"Dependency inversion","text":"<p>Entities must depend on abstractions not on concretions.</p> <ul> <li>Promotes decoupling for flexibility and extensibility.</li> </ul>"},{"location":"oop/guidelines/oop%20guidelines/","title":"Oop guidelines","text":"<ul> <li>SOLID</li> <li>DRY(don't repeat yourself)</li> <li>KISS(keep it simple, stupid)</li> <li>YAGNI(You aren't gonna need it)</li> <li>Tell, Don't Ask</li> <li>Separation of Concerns</li> <li>Least Knowledge (law of Demeter,)</li> <li>The Hollywood</li> <li>Favor Composition over Inheritance</li> <li>Program to an interface, not an implementation.</li> </ul>"},{"location":"oop/guidelines/oop%20guidelines/#reference","title":"Reference","text":"<ul> <li>Tell Don't Ask by Martin Fowler</li> </ul>"},{"location":"oop/patterns/oop%20design%20patterns/","title":"Oop design patterns","text":""},{"location":"oop/patterns/oop%20design%20patterns/#creational","title":"Creational","text":"<ul> <li>Builder</li> <li>Factory Method</li> <li>Singleton</li> <li>Abstract Factory</li> </ul>"},{"location":"oop/patterns/oop%20design%20patterns/#structural","title":"Structural","text":"<ul> <li>Composite</li> <li>Decorator</li> <li>Adapter</li> <li>Facade</li> <li>Proxy</li> <li>Flyweight</li> <li>Bridge</li> </ul>"},{"location":"oop/patterns/oop%20design%20patterns/#behavioral","title":"Behavioral","text":"<ul> <li>Command</li> <li>Observer</li> <li>Strategy</li> <li>Template method</li> <li>State</li> <li>Visitor</li> <li>Chain of Responsibility</li> <li>Mediator</li> </ul>"},{"location":"security/OWASP%20API/API%2001-2023%20-%20Broken%20object%20level%20authorization/","title":"API 01 2023   Broken object level authorization","text":"<ul> <li>Attackers substitute the ID of their own resource in the API call with an ID of a resource belonging to another user. The lack of proper authorization checks allows attackers to access the specified resource. </li> <li>This attack is also known as IDOR (Insecure Direct Object Reference).</li> </ul>"},{"location":"security/OWASP%20API/API%2001-2023%20-%20Broken%20object%20level%20authorization/#use-case","title":"Use case","text":"<ul> <li>API call parameters use the ID of the resource accessed through the API\u00a0<code>/api/shop1/financial_info</code>.</li> <li>Attackers replace the IDs of their resources with a different one which they guessed through\u00a0<code>/api/shop2/financial_info</code>.</li> <li>The API does not check permissions and lets the call through.</li> <li> <ul> <li>Problem is aggravated if IDs can be enumerated\u00a0<code>/api/123/financial_info</code>.</li> </ul> </li> </ul>"},{"location":"security/OWASP%20API/API%2001-2023%20-%20Broken%20object%20level%20authorization/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Implement authorization checks with user policies and hierarchy.</li> <li>Do not rely on IDs that the client sends. Use IDs stored in the session object instead.</li> <li>Check authorization for each client request to access database.</li> <li>Use random IDs that cannot be guessed (UUIDs).</li> <li>Implement a robust test framework to specifically test for this vulnerability type.</li> </ul>"},{"location":"security/OWASP%20API/API%2002-2023%20-%20Broken%20Authentication/","title":"API 02 2023   Broken Authentication","text":"<p>Poorly implemented API authentication allows attackers to assume other users\u2019 identities, or access resources without any authentication at all.</p>"},{"location":"security/OWASP%20API/API%2002-2023%20-%20Broken%20Authentication/#use-case","title":"Use case","text":"<ul> <li>Unprotected APIs thar are considered \"internal\".</li> <li>Weak authentication that does not follow industry best practices.</li> <li>Weak API keys that are not rotated.</li> <li>Passwords that are weak, plain text, encrypted, poorly hashed, shared or default passwords.</li> <li>Authentication susceptible to brute force attacks and credential stuffing.</li> <li>Credentials and keys included in URLs.</li> <li>Lack of access token validation (including JWT validation).</li> <li>Unsigned or weakly signed non-expiring JWTs.</li> </ul>"},{"location":"security/OWASP%20API/API%2002-2023%20-%20Broken%20Authentication/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Check all possible ways to authenticate to all APIs.</li> <li>APIs for password reset and one-time links also allow users to authenticate, and should be protected just as rigorously.</li> <li>Use standard authentication:<ul> <li>token generation.</li> <li>password storage.</li> <li>multi-factor authentication (MFA).</li> </ul> </li> <li>Use short-lived access tokens.</li> <li>Authenticate your apps (so you know who is talking to you).</li> <li>Use stricter rate-limiting for authentication.<ul> <li>implement lockout policies and weak password checks.</li> </ul> </li> </ul>"},{"location":"security/OWASP%20API/API%2003-2023%20-%20Broken%20Object%20Property%20Level%20Authorization/","title":"API 03 2023   Broken Object Property Level Authorization","text":"<p>API endpoints can be vulnerable to attacks based on their data: either they may expose more data than is required for their business purposes (excessive information exposure), or they may inadvertently accept and process more data than they should (mass assignment).</p>"},{"location":"security/OWASP%20API/API%2003-2023%20-%20Broken%20Object%20Property%20Level%20Authorization/#use-case","title":"Use case","text":"<ul> <li>The API returns full data objects as they are stored in the backend database.</li> <li>The client application filters the responses and only shows the data that the users really need to see.</li> <li>Attackers call the API directly and retrieve sensitive data that the UI would filter out.</li> <li>The API works with the data structures without proper filtering.</li> <li>Received payload is blindly transformed into an object and stored.<ul> <li>NodeJS:     var user = new User(req.body);     user.save();</li> <li>Rails:     @user = User.new(params[:user])</li> </ul> </li> <li>Attackers can guess the fields by looking at the\u00a0GET\u00a0request data.</li> </ul>"},{"location":"security/OWASP%20API/API%2003-2023%20-%20Broken%20Object%20Property%20Level%20Authorization/#how-to-prevent","title":"How to prevent","text":"<p>Requests</p> <ul> <li>Do not automatically bind incoming data to internal objects.</li> <li>Explicitly define all the parameters and payloads you are expecting.</li> <li>Use the\u00a0readOnly\u00a0property set to\u00a0true\u00a0in object schemas for all properties that can be retrieved through APIs but should never be modified.</li> <li>Precisely define the schemas, types, and patterns you will accept in requests at design time and enforce them at runtime.</li> </ul> <p>Responses</p> <ul> <li>Never rely on the client to filter data!</li> <li>Review all API responses and adapt them to match what the API consumers really need.</li> <li>Carefully define schemas for all the API responses.</li> <li>Do not forget about error responses, define proper schemas as well.</li> <li>Identify all the sensitive data or Personally Identifiable Information (PII), and justify its use using a robust data governance process.</li> </ul>"},{"location":"security/OWASP%20API/API%2004-2023%20-%20Unlimited%20Resource%20Consumption/","title":"API 04 2023   Unlimited Resource Consumption","text":"<p>The API is not protected against an excessive amount of calls or payload sizes. Attackers can use this for Denial of Service (DoS) and authentication flaws like brute force attacks.</p>"},{"location":"security/OWASP%20API/API%2004-2023%20-%20Unlimited%20Resource%20Consumption/#use-case","title":"Use case","text":"<ul> <li>Attackers overload the API by sending more requests than they can handle.</li> <li>Attackers send requests at a rate exceeding the API\u2019s processing speed, clogging it up.</li> <li>The size of the requests or some fields in them exceeds what the API can process.</li> <li>An attacker submits requests with excessively large payloads or complex queries causing the API to hit a bottleneck and drop requests.</li> </ul>"},{"location":"security/OWASP%20API/API%2004-2023%20-%20Unlimited%20Resource%20Consumption/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Apply rate limiting policies to all endpoints.</li> <li>Pay special attention to endpoints related to authentication which are a prime target for hackers.</li> <li>Tailor rate limiting to match what API methods, clients, or addresses need or should be allowed to retrieve.</li> <li>IPs can easily be forged, whenever possible, configure rate limiting on different keys, such as fingerprints, or tokens.\u00a0</li> <li>Limit payload sizes, and query complexity.</li> <li>Define CPU/memory limits for container and compute resources.</li> <li>Limit the complexity of queries (especially in GraphQL) to prevent excessive computation on the server.</li> <li>Limit the amount of data that can be retrieved by a query by imposing limits on the pagination size, or page counts.</li> <li>Leverage DDoS protections from your cloud provider.</li> </ul>"},{"location":"security/OWASP%20API/API%2005-2023%20-%20Broken%20function%20level%20authorization/","title":"API 05 2023   Broken function level authorization","text":"<p>The API relies on the client to use user-level or admin-level/privileged APIs as appropriate.\u00a0Attackers figure out the \u201chidden\u201d admin API methods and invoke them directly.</p>"},{"location":"security/OWASP%20API/API%2005-2023%20-%20Broken%20function%20level%20authorization/#use-case","title":"Use case","text":"<ul> <li>Some administrative functions are exposed as APIs.</li> <li>Sensitive operations should only be available internally (for example deleting a resource)</li> <li>Non-privileged users can access these functions without authorization if they know how.</li> <li>Can be a matter of knowing the URL, or using a different verb or a parameter:<ul> <li><code>/api/users/v1/user/myinfo</code></li> <li><code>/api/admins/v1/users/all</code></li> </ul> </li> </ul>"},{"location":"security/OWASP%20API/API%2005-2023%20-%20Broken%20function%20level%20authorization/#how-to-prevent","title":"How to prevent","text":"<ul> <li> <ul> <li>Do not rely on the client to enforce admin access.</li> <li>Apply\u00a0<code>deny all</code>\u00a0access by default.</li> </ul> </li> <li> <p>Only allow operations to users belonging to the appropriate group or role.</p> </li> <li>Implement properly designed and tested authorization.</li> </ul>"},{"location":"security/OWASP%20API/API%2006-2023%20-%20Unrestricted%20Access%20to%20Sensitive%20Business%20Flows/","title":"API 06 2023   Unrestricted Access to Sensitive Business Flows","text":"<p>A set of APIs exposes a business flow and an attacker abuses these APIs using automated methods to achieve a malicious intent, such as exfiltrating data or manipulating market or price data.</p>"},{"location":"security/OWASP%20API/API%2006-2023%20-%20Unrestricted%20Access%20to%20Sensitive%20Business%20Flows/#use-case","title":"Use case","text":"<ul> <li>An attacker discovers an API to buy a product online and uses automation to bulk purchase all items of a newly released product which they later re-sell.\u00a0</li> <li>Real-estate website\u2019s price information can be scraped over time to predict house price trends in an area.</li> <li>Attackers can use automation to perform actions faster than a human user and gain an unfair advantage on auction sites, or similar.</li> </ul>"},{"location":"security/OWASP%20API/API%2006-2023%20-%20Unrestricted%20Access%20to%20Sensitive%20Business%20Flows/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Understand business flows that could be sensitive to abuse and add extra layers of protection to these and ensure authentication is required, using recommended OAuth flows, like authorization_code.</li> <li>Ensure that APIs are fully protected with robust rate-limiting in front of the API.</li> <li>Monitor API access and restrict clients using either suspicious devices or originating from risky IP addresses.\u00a0</li> <li>Identify non-human usage patterns such as impossibly quick transactions, and insert Captcha or other human detection controls.</li> </ul>"},{"location":"security/OWASP%20API/API%2007-2023%20-%20Server%20Side%20Request%20Forgery/","title":"API 07 2023   Server Side Request Forgery","text":"<p>Server-Side Request Forgery (SSRF) can occur when an API fetches a remote resource without validating the user-supplied URL. This enables an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN.</p>"},{"location":"security/OWASP%20API/API%2007-2023%20-%20Server%20Side%20Request%20Forgery/#use-case","title":"Use case","text":"<ul> <li>An API accepts a URL as a parameter for a redirection, and an attacker finds that they can use this to redirect the response to a rogue site which is able to steal sensitive API data.</li> <li>An attacker can force an API to load resources from a server under their control; this is the basis of a key injection attack in JWTs.</li> <li>An API allows access to the local host allowing an attacker to use malform requests to access local resources.</li> </ul>"},{"location":"security/OWASP%20API/API%2007-2023%20-%20Server%20Side%20Request%20Forgery/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Precisely define the schemas, types, and patterns you will accept in requests at design time and enforce them at runtime.</li> <li>Prevent your API server from following HTTP redirections.</li> <li>Use an\u00a0<code>allow list</code>\u00a0of permitted redirects or accesses.\u00a0</li> <li>Restrict the range of allowed URL schemes and ports allowed.</li> <li>Use a standard implementation for the library responsible for loading resources making sure it cannot access the local host, and uses sanitized URLs from a safe URL parser.</li> </ul>"},{"location":"security/OWASP%20API/API%2008-2023%20-%20Security%20misconfiguration/","title":"API 08 2023   Security misconfiguration","text":"<p>Poor configuration of the API servers allows attackers to exploit them.</p>"},{"location":"security/OWASP%20API/API%2008-2023%20-%20Security%20misconfiguration/#use-case","title":"Use case","text":"<ul> <li>Unpatched systems</li> <li>Unprotected files and directories</li> <li>Unhardened images</li> <li>Missing, outdated, or misconfigured TLS</li> <li>Exposed storage or server management panels</li> <li>Missing CORS policy or security headers</li> <li>Error messages with stack traces</li> <li>Unnecessary features enabled</li> </ul>"},{"location":"security/OWASP%20API/API%2008-2023%20-%20Security%20misconfiguration/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Automate the hardening and patching processes of the full API stack (code, libraries, containers)</li> <li>Automate test to API endpoints for misconfiguration (TLS version, cyphers, bad verbs)</li> <li>Disable unnecessary features.</li> <li>Restrict administrative access.</li> <li>Define and enforce all outputs, including errors.</li> </ul>"},{"location":"security/OWASP%20API/API%2009-2023%20-%20Improper%20inventory%20management/","title":"API 09 2023   Improper inventory management","text":"<p>Attackers find non-production versions of the API (for example, staging, testing, beta, or earlier versions) that are not as well protected as the production API, and use those to launch their attacks.</p>"},{"location":"security/OWASP%20API/API%2009-2023%20-%20Improper%20inventory%20management/#use-case","title":"Use case","text":"<ul> <li>DevOps, the cloud, containers, and Kubernetes make having multiple deployments easy (for example, dev, test, branches, staging, and old versions).</li> <li>Desire to maintain backward compatibility forces to leave old APIs running.</li> <li>Old or non-production versions are not properly maintained, but these endpoints still have access to production data.</li> <li>Once authenticated with one endpoint, attackers may switch to the other, production one.</li> </ul>"},{"location":"security/OWASP%20API/API%2009-2023%20-%20Improper%20inventory%20management/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Keep an up-to-date inventory of all API hosts.</li> <li>Limit access to anything that should not be public.</li> <li>Limit access to production data, and segregate access to production and non-production data.</li> <li>Implement additional external controls, such as API firewalls.</li> <li>Properly retire old versions of APIs or backport security fixes to them.</li> <li>Implement strict authentication, redirects, CORS, and so forth.</li> </ul>"},{"location":"security/OWASP%20API/API%2010-2023%20-%20Unsafe%20Consumption%20of%20APIs/","title":"API 10 2023   Unsafe Consumption of APIs","text":"<p>Modern API-based systems tend to be highly interconnected, frequently consuming upstream APIs. Unfortunately, these upstream APIs may themselves be vulnerable and put their consumers at risk.</p>"},{"location":"security/OWASP%20API/API%2010-2023%20-%20Unsafe%20Consumption%20of%20APIs/#use-case","title":"Use case","text":"<ul> <li>An upstream API may inadvertently store data provided to it by a consumer, thereby violating the data governance regulations of the consumer.</li> <li>An upstream API provider may be attacked and compromised and then pass malicious data to its consumers due to insufficient internal controls. A typical example is an SQL injection attack.</li> </ul>"},{"location":"security/OWASP%20API/API%2010-2023%20-%20Unsafe%20Consumption%20of%20APIs/#how-to-prevent","title":"How to prevent","text":"<ul> <li>Just like the case with user input, do not trust upstream API data.\u00a0</li> <li>Filter and sanitize any input data regardless of origin, particularly against injection attacks.</li> <li>Ensure that upstream API providers specify their API contract, and use runtime mechanisms to enforce this contract.</li> <li>Assume upstream API providers are part of your supply chain and verify their internal development processes.\u00a0</li> <li>Use a secure communication channel at all times.</li> </ul>"},{"location":"security/OWASP%20API/Top%2010%20Vulnerabilities%202023/","title":"Top 10 Vulnerabilities 2023","text":"<ul> <li>Broken Object Level Authorization </li> <li>Broken Authentication </li> <li>Broken Object Property Level Authorization </li> <li>Unrestricted resources consumption</li> <li>broken function level authorization</li> <li>Unrestricted access to sensitive business flows</li> <li>Server side request forgery</li> <li>Security misconfiguration</li> <li>Improper inventory managements</li> <li>Unsafe consumption of APIs.</li> </ul>"},{"location":"security/OWASP%20API/Top%2010%20Vulnerabilities%202023/#reference","title":"Reference","text":"<ul> <li>https://owasp.org/API-Security/editions/2023/en/0x11-t10/</li> <li>https://apisecurity.io/owasp-api-security-top-10/</li> </ul>"},{"location":"soft%20skills/story%20telling/Man%20in%20a%20Hole/","title":"Reference","text":"<ul> <li>man in a hole</li> </ul>"},{"location":"soft%20skills/story%20telling/STAR%20Method/","title":"STAR Method","text":"<p>structured manner of responding to a behavioral-based interview question by discussing the specific situation, task, action, and result of the situation you are describing.</p>"},{"location":"tech%20talks/Architecture/","title":"Architecture","text":""},{"location":"tech%20talks/Architecture/#performance-tricks-i-learned-from-contributing-to-open-source-net-packages","title":"Performance tricks I learned from contributing to open source .NET packages","text":"<ul> <li>Performance tricks I learned from contributing to open source .NET packages - Daniel Marbach</li> </ul>"},{"location":"tech%20talks/Architecture/#dont-build-a-distributed-monolith-jonathan-j-tower-ndc-london-2023","title":"Don\u2019t Build a Distributed Monolith - Jonathan \"J.\" Tower - NDC London 2023","text":"<ul> <li>Don\u2019t Build a Distributed Monolith - Jonathan \"J.\" Tower - NDC London 2023</li> </ul>"},{"location":"tech%20talks/General%20.NET/","title":"General .NET","text":""},{"location":"tech%20talks/General%20.NET/#c-source-generators","title":"C# Source Generators","text":"<ul> <li>C# Source Generators</li> </ul>"},{"location":"tech%20talks/General%20.NET/#automate-yourself-out-of-a-job-with-roslyn-mark-rendle-ndc-copenhagen-2022","title":"Automate yourself out of a job with Roslyn - Mark Rendle - NDC Copenhagen 2022","text":"<p>Automate yourself out of a job with Roslyn - Mark Rendle - NDC Copenhagen 2022</p>"},{"location":"tech%20talks/General%20.NET/#practical-ddd-by-hossam-barakat","title":"Practical DDD by Hossam Barakat","text":"<p>Practical Domain-Driven Design with EF Core - Hossam Barakat - NDC London 2021</p>"},{"location":"tech%20talks/Performance/","title":"Performance","text":""},{"location":"tech%20talks/Performance/#turbocharged-writing-high-performance-c-and-net-code-by-steve-gordon","title":"Turbocharged: Writing High-performance C# and .NET code, by Steve Gordon","text":"<ul> <li>Turbocharged: Writing High-performance C# and .NET code, by Steve Gordon</li> </ul>"},{"location":"tech%20talks/Performance/#high-performance-code-design-patterns-in-c-konrad-kokosa-net-fest-2019","title":"High-performance code design patterns in C#. Konrad Kokosa .NET Fest 2019","text":"<ul> <li>High-performance code design patterns in C#. Konrad Kokosa .NET Fest 2019</li> </ul>"},{"location":"tech%20talks/Performance/#patterns-for-high-performance-c-federico-andres-lois","title":"Patterns for high-performance C# - Federico Andres Lois","text":"<ul> <li>Patterns for high-performance C# - Federico Andres Lois</li> </ul>"},{"location":"tech%20talks/Performance/#diagnosing-memory-leaks-in-net-apps","title":"Diagnosing memory leaks in .NET apps","text":"<ul> <li>Diagnosing memory leaks in .NET apps</li> </ul>"},{"location":"tech%20talks/Performance/#high-cpu-usage-with-net-counters","title":"High CPU Usage with .NET Counters****","text":"<ul> <li>High CPU Usage with .NET Counters</li> </ul>"},{"location":"tech%20talks/Performance/#diagnosing-thread-pool-exhaustion-issues-in-net-core-apps","title":"Diagnosing thread pool exhaustion issues in .NET Core apps","text":"<ul> <li>Diagnosing thread pool exhaustion issues in .NET Core apps</li> </ul>"}]}